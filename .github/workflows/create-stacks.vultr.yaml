name: Create VPS instance using VultrCLI

on: 
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: false
        default: 'warning'

env:
  VULTR_VPS_REGION: syd
  VULTR_VPS_PLAN: vc2-1c-1gb
  VULTR_VPS_OS_IMAGE: 186 # CentOS
  VULTR_APP_NAME: django-vue-stack
  VULTR_APP_ID: 17 # Docker
  SSH_EMAIL_ADDRESS: sammykerridge@gmail.com

jobs:
  ssh:
    name: Generate and store SSH keys
    runs-on: ubuntu-latest
    steps:
      - name: Install vultr-cli
        uses: techknowlogick/action-vultr@v2
        with:
          token: ${{ secrets.VULTR_API_KEY }}
          
      - name: Checkout start-script.sh startup script
        uses: Bhacaz/checkout-files@v1
        with:
          files: ".github/scripts"
          token: ${{ secrets.GH_ACTIONS_READ_ONLY }}

      - name: Generate + upload new SSH key pair
        id: generate-keys
        run: bash -eux .github/scripts/manage-vultr.sh --ssh
        env:
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

      - name: Add SSH private key to Github Secrets
        uses: gliech/create-github-secret-action@v1
        with:
          name: GH_SSH_PRIVATE_KEY
          value: ${{ env.PRIVATE_KEY }}
          pa_token: ${{ secrets.GH_PA_TOKEN }}

  vultr:
    name: Deploy Vultr VPS Instance
    needs: ssh
    runs-on: ubuntu-latest
    steps:
      - name: Install vultr-cli
        uses: techknowlogick/action-vultr@v2
        with:
          token: ${{ secrets.VULTR_API_KEY }}

      - name: Checkout start-script.sh startup script
        uses: Bhacaz/checkout-files@v1
        with:
          files: "start-script.sh .github"
          token: ${{ secrets.GH_ACTIONS_READ_ONLY }}

      # - name: Find and replace secrets
      #   uses: ./.github/actions/vultr

      - name: Find and replace secrets in start script
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "<GH_ACCESS_TOKEN>"
          replace: "${{ secrets.GH_PA_TOKEN }}"
          include: "start-script.sh"

      - name: Find and replace secrets in start script
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "<GH_SSH_URL>"
          replace: "${{ github.event.repository.ssh_url }}"
          include: "start-script.sh"

      - name: Find and replace secrets in start script
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "<GH_USERNAME>"
          replace: "${{ github.repository_owner }}"
          include: "start-script.sh"

      - name: Push startup script using vultr-cli
        id: push-startup-script
        shell: bash
        run: |
          export VULTR_API_KEY=${{ secrets.VULTR_API_KEY }}
          STARTUP_SCRIPT_ID=$(vultr-cli script list |  awk '/${{ env.VULTR_APP_NAME }}/ { print $1 }')

          if [ -z "$STARTUP_SCRIPT_ID" ]
          then
            # base64 encode our script
            SCRIPT=$(base64 -w0 start-script.sh)

            vultr-cli script create \
              --name ${{ env.VULTR_APP_NAME }} \
              --type boot \
              --script $SCRIPT

            STARTUP_SCRIPT_ID=$(vultr-cli script list |  awk '/${{ env.VULTR_APP_NAME }}/ { print $1 }')
          fi
          
          vultr-cli script list
          echo "::set-output name=STARTUP_SCRIPT_ID::$STARTUP_SCRIPT_ID"

      # - name: Push SSH public key using vultr-cli
      #   id: push-ssh-key
      #   run: |
      #     export VULTR_API_KEY=${{ secrets.VULTR_API_KEY }}
      #     SSH_KEY_ID=$(vultr-cli ssh-key list |  awk '/${{ env.VULTR_APP_NAME }}/ { print $1 }')

      #     if [ -z "$SSH_KEY_ID" ]
      #     then
      #       vultr-cli ssh-key create \
      #         --key "${{ needs.ssh.outputs.public_key }}" \
      #         --name ${{ env.VULTR_APP_NAME }}
            
      #       SSH_KEY_ID=$(vultr-cli ssh-key list |  awk '/${{ env.VULTR_APP_NAME }}/ { print $1 }')
      #     fi
          
      #     vultr-cli ssh-key list
      #     echo "::set-output name=SSH_KEY_ID::$SSH_KEY_ID"
          
      - name: Get stuff by ID
        run: |
          export VULTR_API_KEY=${{ secrets.VULTR_API_KEY }}
          vultr-cli script get ${{ steps.push-startup-script.outputs.STARTUP_SCRIPT_ID }}
          # vultr-cli ssh-key get ${{ steps.push-ssh-key.outputs.SSH_KEY_ID }}

      # - run: echo "envvv ${{ env.GIT_TAG_SCRIPT }}"
      # - run: bash -eux .github/scripts/manage-vultr.sh --ref "bitch"
      #   env:
      #     VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
      
      # - run: echo ${{ steps.push-ssh-key.outputs.WORD }}
          
      - name: Create instance using vultr-cli
        id: create-new-instance
        run: |
          export VULTR_API_KEY=${{ secrets.VULTR_API_KEY }}

          if [ -z "$(vultr-cli instance list | grep ${{ env.VULTR_APP_NAME }})" ]
          then
            vultr-cli instance list
          fi

      #     vultr-cli instance create \
      #     --region ${{ env.VULTR_VPS_REGION }} \
      #     --plan ${{ env.VULTR_VPS_PLAN }} \
      #     --os ${{ env.VULTR_VPS_OS_IMAGE }} \
      #     --app ${{ env.VULTR_VPS_APP_ID }} \
      #     --label ${{ env.VULTR_APP_NAME }} \
      #     --script-id ${{ steps.push-startup-script.outputs.STARTUP_SCRIPT_ID }}
      #     --ipv6 false
