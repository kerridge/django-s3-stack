name: Create VPS instance using VultrCLI

on: 
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: false
        default: 'warning'

env:
  VULTR_VPS_REGION: syd
  VULTR_VPS_PLAN: vc2-1c-1gb
  VULTR_VPS_OS_IMAGE: 186 # CentOS
  VULTR_APP_NAME: django-vue-stack
  VULTR_APP_ID: 17 # Docker
  SSH_EMAIL_ADDRESS: sammykerridge@gmail.com

jobs:
  prepare:
    name: Prepare SSH keys and startup script
    outputs:
      STARTUP_SCRIPT_ID: ${{ steps.set-ids.outputs.STARTUP_SCRIPT_ID }}
      SSH_KEY_ID: ${{ steps.set-ids.outputs.SSH_KEY_ID }}
    runs-on: ubuntu-latest
    steps:
      # ============== PREPARE =====================
      - name: Install vultr-cli
        uses: techknowlogick/action-vultr@v2
        with:
          token: ${{ secrets.VULTR_API_KEY }}
      
      - name: Checkout server startup script and github scripts
        uses: Bhacaz/checkout-files@v1
        with:
          files: ".github/scripts start-script.sh"
          token: ${{ secrets.GH_ACTIONS_READ_ONLY }}
      
      # ============== SSH KEYS =====================
      - name: Generate + upload new SSH keys
        id: generate-keys
        run: bash -eu .github/scripts/manage-vultr.sh --ssh
        env:
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

      - name: Read in and mask private key
        id: private-key
        run: |
          PRIVATE_KEY=$(cat key.txt)
          echo "::set-output name=PRIVATE_KEY::$PRIVATE_KEY"
          
          cat key.txt | while read line
          do
            echo "::add-mask::$line"
          done

      - name: Add SSH private key to Github Secrets
        uses: gliech/create-github-secret-action@v1
        with:
          name: GH_SSH_PRIVATE_KEY
          value: ${{ steps.private-key.outputs.PRIVATE_KEY }}
          pa_token: ${{ secrets.GH_PA_TOKEN }}

      # ============== START SCRIPT =====================
      - name: Find and replace secrets in start script
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "<GH_ACCESS_TOKEN>"
          replace: "${{ secrets.GH_PA_TOKEN }}"
          include: "start-script.sh"

      - name: Find and replace secrets in start script
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "<GH_SSH_URL>"
          replace: "${{ github.event.repository.ssh_url }}"
          include: "start-script.sh"

      - name: Find and replace secrets in start script
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "<GH_USERNAME>"
          replace: "${{ github.repository_owner }}"
          include: "start-script.sh"

      - name: Encode and upload start script to Vultr
        run: bash -eu .github/scripts/manage-vultr.sh --start-script
        env:
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

      - name: Set outputs for next job to use
        id: set-ids
        run: |
          echo "::set-output name=STARTUP_SCRIPT_ID::${{ env.STARTUP_SCRIPT_ID }}"
          echo "::set-output name=SSH_KEY_ID::${{ env.SSH_KEY_ID }}"

  deploy:
    name: Deploy Vultr VPS Instance
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      # ============== PREPARE =====================
      - name: Install vultr-cli
        uses: techknowlogick/action-vultr@v2
        with:
          token: ${{ secrets.VULTR_API_KEY }}
      
      - name: Checkout github scripts
        uses: Bhacaz/checkout-files@v1
        with:
          files: ".github/scripts"
          token: ${{ secrets.GH_ACTIONS_READ_ONLY }}
      
      # ============== DEPLOY =====================
      - name: Get stuff by ID
        run: |
          export VULTR_API_KEY=${{ secrets.VULTR_API_KEY }}
          vultr-cli script get ${{needs.prepare.outputs.STARTUP_SCRIPT_ID}}
          vultr-cli ssh-key get ${{needs.prepare.outputs.SSH_KEY_ID}}
          
      - name: Create instance using vultr-cli
        id: create-new-instance
        run: |
          export VULTR_API_KEY=${{ secrets.VULTR_API_KEY }}

          if [ -z "$(vultr-cli instance list | grep ${{ env.VULTR_APP_NAME }})" ]
          then
            vultr-cli instance list
          fi

      #     vultr-cli instance create \
      #     --region ${{ env.VULTR_VPS_REGION }} \
      #     --plan ${{ env.VULTR_VPS_PLAN }} \
      #     --os ${{ env.VULTR_VPS_OS_IMAGE }} \
      #     --app ${{ env.VULTR_VPS_APP_ID }} \
      #     --label ${{ env.VULTR_APP_NAME }} \
      #     --script-id ${{ steps.push-startup-script.outputs.STARTUP_SCRIPT_ID }}
      #     --ipv6 false
